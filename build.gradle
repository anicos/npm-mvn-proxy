import groovy.util.slurpersupport.GPathResult

buildscript {
    ext {
        springBootVersion = '1.4.3.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/libs-release-local" }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
    }
}
plugins {
    id 'java'
    id "org.springframework.boot" version "1.4.3.RELEASE"
    id 'groovy'
    id 'jacoco'
    id "org.sonarqube" version "2.2.1"
}

jar {
    baseName = 'npm-mvn-proxy'
    archiveName = 'npm-mvn-proxy.jar'
    version = '1.2'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

def expectedCoverageLevel = 99.8

repositories {
    mavenCentral()
}

springBoot {
    executable = true
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-web')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.spockframework:spock-spring')
    testCompile('com.github.tomakehurst:wiremock:2.3.1')
    testCompile('cglib:cglib-nodep:3.2.4')
    testCompile('org.powermock:powermock-module-junit4:1.6.6')
    testCompile('org.powermock:powermock-api-mockito:1.6.6')
}

jacoco {
    toolVersion = "0.7.5.201505241946"
}

jacocoTestReport {
    reports {
        xml {
            enabled true
        }
        html {
            enabled true
        }
    }
}

task checkCoverage {
    doLast {
        def report = getRaport()
        def currentLevelOfCoverage = calculatePercentCoverage(report)

        println "The current level of coverage is [${currentLevelOfCoverage}%]"
        if (currentLevelOfCoverage < expectedCoverageLevel) {
            throw new GradleException("The current level of coverage [${currentLevelOfCoverage}%] is lower than expected [{$expectedCoverageLevel}%]")
        }
    }
}

jacocoTestReport.dependsOn test
checkCoverage.dependsOn jacocoTestReport

GPathResult getRaport() {
    def parser = new XmlSlurper()
    parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
    parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
    return parser.parse("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
}

Double calculatePercentCoverage(GPathResult report) {
    def missed = report.counter[0].@missed.toInteger()
    def covered = report.counter[0].@covered.toInteger()
    def all = missed + covered
    return covered * 100 / all
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}
