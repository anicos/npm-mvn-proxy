import groovy.util.slurpersupport.GPathResult

buildscript {
    ext {
        springBootVersion = '1.4.2.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/libs-release-local" }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'groovy'
apply plugin: 'jacoco'


jar {
    baseName = 'npm-mvn-proxy'
    archiveName = 'npm-mvn-proxy.jar'
    version = '1.0.0'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

test.maxParallelForks = 4

def expectedCoverageLevel = 99

repositories {
    mavenCentral()
}

springBoot {
    executable = true
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-web')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.spockframework:spock-spring')
    testCompile('com.github.tomakehurst:wiremock:2.3.1')
    testCompile('cglib:cglib-nodep:3.2.4')
}

jacoco {
    toolVersion = "0.7.5.201505241946"
}

jacocoTestReport {
    reports {
        xml {
            enabled true
        }
        html {
            enabled true
        }
    }
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task checkCoverage << {
    def report = getRaport()
    def currentLevelOfCoverage = calculatePercentCoverage(report)

    println "The current level of coverage is [${currentLevelOfCoverage}%]"
    if (currentLevelOfCoverage < expectedCoverageLevel) {
        throw new GradleException("The current level of coverage [${currentLevelOfCoverage}%] is lower than expected [{$expectedCoverageLevel}%]")
    }
}

jacocoTestReport.dependsOn test
checkCoverage.dependsOn jacocoTestReport

GPathResult getRaport() {
    def parser = new XmlSlurper()
    parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
    parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
    return parser.parse("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
}

Double calculatePercentCoverage(GPathResult report) {
    def missed = report.counter[0].@missed.toInteger()
    def covered = report.counter[0].@covered.toInteger()
    def all = missed + covered
    return covered * 100 / all
}